[{"id":"motorcycle-dashboard","type":"tab","label":"üèçÔ∏è Motorcycle Dashboard","disabled":false,"info":"Enhanced motorcycle telemetry dashboard with GPS status indicators and camera feed"},{"id":"inject-timer","type":"inject","z":"motorcycle-dashboard","name":"Every 2 seconds","props":[{"p":"payload"}],"repeat":"2","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":140,"y":100,"wires":[["get-latest-data"]]},{"id":"get-latest-data","type":"exec","z":"motorcycle-dashboard","command":"sqlite3 /home/pi/motorcycle_data/telemetry.db \"SELECT ax, ay, az, COALESCE(latitude, 0) as latitude, COALESCE(longitude, 0) as longitude, COALESCE(speed_mph, 0) as speed_mph, COALESCE(gps_fix, 0) as gps_fix, timestamp FROM telemetry_data ORDER BY timestamp DESC LIMIT 1\" -json","addpay":"","append":"","useSpawn":"false","timer":"","oldrc":false,"name":"Query SQLite with GPS","x":380,"y":100,"wires":[["parse-json"],["debug-error"],["debug-error"]]},{"id":"parse-json","type":"function","z":"motorcycle-dashboard","name":"Parse JSON Result","func":"try {\n    if (msg.payload && typeof msg.payload === 'string' && msg.payload.trim()) {\n        const jsonData = JSON.parse(msg.payload.trim());\n        if (jsonData && Array.isArray(jsonData) && jsonData.length > 0) {\n            msg.payload = jsonData;\n            return msg;\n        }\n    }\n} catch (e) {\n    node.warn(\"JSON Parse Error: \" + e.message + \" | Payload: '\" + msg.payload + \"'\");\n}\nreturn null;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":600,"y":100,"wires":[["process-data"]]},{"id":"debug-error","type":"debug","z":"motorcycle-dashboard","name":"SQLite Error","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":600,"y":160,"wires":[]},{"id":"process-data","type":"function","z":"motorcycle-dashboard","name":"Calculate G-Forces & GPS","func":"if (msg.payload && msg.payload.length > 0) {\n    const data = msg.payload[0];\n    \n    // Calibration constants\n    const X_OFFSET = 0;\n    const Y_OFFSET = 0;\n    const Z_OFFSET = 0;\n    const SCALE = 16384;\n    \n    // Calculate G-forces\n    const forwardG = (data.ax - X_OFFSET) / SCALE;\n    const lateralG = (data.ay - Y_OFFSET) / SCALE;\n    const verticalG = (data.az - Z_OFFSET) / SCALE;\n    \n    // Calculate lean angle in degrees\n    const leanAngle = Math.asin(Math.max(-1, Math.min(1, lateralG))) * 57.3;\n    \n    // Enhanced GPS status detection\n    // Check both fix AND valid coordinates (not 0,0)\n    const hasValidCoords = (data.latitude !== 0 && data.longitude !== 0);\n    const hasGpsFix = Boolean(data.gps_fix);\n    const hasValidGPS = hasValidCoords && hasGpsFix;\n    \n    // Get default coordinates from system settings (or use London if not set)\n    // You should update these to your local area\n    const defaultLat = 51.5074; // Default: London\n    const defaultLon = -0.1278;\n    \n    // Use actual coordinates or default\n    const lat = hasValidGPS ? parseFloat(data.latitude) : defaultLat;\n    const lon = hasValidGPS ? parseFloat(data.longitude) : defaultLon;\n    \n    // Time since last update\n    const lastUpdate = new Date(data.timestamp).toLocaleTimeString();\n    const dataAge = Math.round((Date.now() - new Date(data.timestamp).getTime()) / 1000);\n    \n    // Detailed GPS status text for troubleshooting\n    let gpsStatusText = hasValidGPS ? \"GPS Lock Acquired\" : \n                       (hasGpsFix ? \"GPS Fix but Invalid Coordinates\" : \"Searching for satellites...\");\n    \n    // Map presentation based on GPS status\n    const mapName = hasValidGPS ? 'Motorcycle Location' : 'No Valid GPS Signal';\n    const mapIcon = hasValidGPS ? 'motorcycle' : 'question-circle';\n    const mapColor = hasValidGPS ? 'blue' : 'red';\n    const mapPopup = hasValidGPS ? \n                   `GPS Lock: ${lat.toFixed(6)}, ${lon.toFixed(6)}` : \n                   `GPS Status: ${gpsStatusText}`;\n    \n    // Create separate messages for each component\n    const messages = [\n        { topic: 'lean_angle', payload: parseFloat(leanAngle.toFixed(1)) },\n        { topic: 'forward_g', payload: parseFloat(forwardG.toFixed(3)) },\n        { topic: 'lateral_g', payload: parseFloat(lateralG.toFixed(3)) },\n        { topic: 'vertical_g', payload: parseFloat(verticalG.toFixed(3)) },\n        { topic: 'speed', payload: parseFloat(data.speed_mph || 0) },\n        { \n            topic: 'gps_map', \n            payload: {\n                lat: lat,\n                lon: lon,\n                name: mapName,\n                icon: mapIcon,\n                iconColor: mapColor,\n                popup: mapPopup\n            }\n        },\n        {\n            topic: 'gps_status',\n            payload: {\n                hasGPS: hasValidGPS,\n                hasGpsFix: hasGpsFix,\n                hasValidCoords: hasValidCoords,\n                statusText: gpsStatusText,\n                latitude: data.latitude,\n                longitude: data.longitude,\n                gps_fix: data.gps_fix,\n                speed: data.speed_mph || 0,\n                lastUpdate: lastUpdate,\n                dataAge: dataAge\n            }\n        },\n        {\n            topic: 'system_status',\n            payload: {\n                recordCount: context.get('counter') || 0,\n                lastUpdate: lastUpdate,\n                dataAge: dataAge\n            }\n        }\n    ];\n    \n    // Increment counter\n    const count = (context.get('counter') || 0) + 1;\n    context.set('counter', count);\n    messages[7].payload.recordCount = count;\n    \n    return messages;\n}\nreturn null;","outputs":8,"noerr":0,"initialize":"","finalize":"","libs":[],"x":800,"y":100,"wires":[["lean-gauge"],["forward-g-gauge"],["lateral-g-gauge"],["vertical-g-gauge"],["speed-gauge"],["gps-map"],["gps-status-display"],["system-status-display"]]},{"id":"lean-gauge","type":"ui_gauge","z":"motorcycle-dashboard","name":"Lean Angle","group":"gauges","order":1,"width":4,"height":4,"gtype":"gage","title":"üèçÔ∏è Lean Angle","label":"degrees","format":"{{value}}¬∞","min":-60,"max":60,"colors":["#00b500","#e6e600","#ca3838"],"seg1":30,"seg2":45,"x":1020,"y":40,"wires":[]},{"id":"forward-g-gauge","type":"ui_gauge","z":"motorcycle-dashboard","name":"Forward G-Force","group":"gauges","order":2,"width":4,"height":4,"gtype":"gage","title":"‚ö° Forward G","label":"G","format":"{{value}}g","min":-1.5,"max":1.5,"colors":["#ca3838","#e6e600","#00b500"],"seg1":0.5,"seg2":1,"x":1020,"y":80,"wires":[]},{"id":"lateral-g-gauge","type":"ui_gauge","z":"motorcycle-dashboard","name":"Lateral G-Force","group":"gauges","order":3,"width":4,"height":4,"gtype":"gage","title":"üåÄ Lateral G","label":"G","format":"{{value}}g","min":-1.2,"max":1.2,"colors":["#ca3838","#e6e600","#00b500"],"seg1":0.4,"seg2":0.8,"x":1020,"y":120,"wires":[]},{"id":"vertical-g-gauge","type":"ui_gauge","z":"motorcycle-dashboard","name":"Vertical G-Force","group":"gauges","order":4,"width":4,"height":4,"gtype":"gage","title":"‚ÜïÔ∏è Vertical G","label":"G","format":"{{value}}g","min":-2,"max":2,"colors":["#ca3838","#e6e600","#00b500"],"seg1":-0.5,"seg2":0.5,"x":1020,"y":160,"wires":[]},{"id":"speed-gauge","type":"ui_gauge","z":"motorcycle-dashboard","name":"Speed","group":"performance","order":1,"width":6,"height":4,"gtype":"gage","title":"üöÄ Speed","label":"mph","format":"{{value}} mph","min":0,"max":120,"colors":["#00b500","#e6e600","#ca3838"],"seg1":45,"seg2":70,"x":1020,"y":200,"wires":[]},{"id":"center-map","type":"worldmap","z":"motorcycle-dashboard","name":"GPS Location","lat":"51.5074","lon":"-0.1278","zoom":"15","layer":"OSM","cluster":"","maxage":"","usermenu":"show","layers":"show","panit":"false","panlock":"false","zoomlock":"false","hiderightclick":"false","coords":"deg","showgrid":"false","allowFileDrop":"false","path":"/worldmap","overlist":"DR,CO,RA,DN,HM","maplist":"OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS","mapname":"","mapurl":"","mapopt":"","mapwms":false},{"id":"gps-status-display","type":"ui_template","z":"motorcycle-dashboard","group":"gps-info","name":"GPS Status Panel","order":1,"width":12,"height":3,"format":"<div style=\"padding: 10px; border-radius: 5px; background: {{msg.payload.hasGPS ? '#e8f5e8' : '#ffe6e6'}}; border: 2px solid {{msg.payload.hasGPS ? '#4caf50' : '#f44336'}};\">\n  <h3 style=\"margin: 0 0 10px 0; color: {{msg.payload.hasGPS ? '#2e7d32' : '#c62828'}};\">\n    {{msg.payload.hasGPS ? 'üõ∞Ô∏è GPS ACTIVE' : '‚ùå GPS NOT AVAILABLE'}}\n  </h3>\n  \n  <div style=\"display: flex; justify-content: space-between; flex-wrap: wrap;\">\n    <div style=\"flex: 1; min-width: 200px; margin-right: 10px;\">\n      <strong>Status:</strong> {{msg.payload.statusText}}<br>\n      <strong>Fix Type:</strong> {{msg.payload.hasGpsFix ? '3D Fix' : 'No Fix'}}<br>\n      <strong>Speed:</strong> {{msg.payload.speed}} mph\n    </div>\n    \n    <div style=\"flex: 1; min-width: 200px;\">\n      <strong>Latitude:</strong> {{msg.payload.hasValidCoords ? msg.payload.latitude.toFixed(6) : 'N/A'}}<br>\n      <strong>Longitude:</strong> {{msg.payload.hasValidCoords ? msg.payload.longitude.toFixed(6) : 'N/A'}}<br>\n      <strong>Last Update:</strong> {{msg.payload.lastUpdate}} ({{msg.payload.dataAge}}s ago)\n    </div>\n  </div>\n  \n  <div style=\"margin-top: 10px; font-size: 12px; color: #666;\">\n    {{msg.payload.hasGPS ? 'Map showing actual location' : 'Map showing default location until GPS fix acquired'}}\n    {{!msg.payload.hasGPS && msg.payload.dataAge > 60 ? ' ‚Ä¢ ‚ö†Ô∏è GPS service might need restart' : ''}}\n  </div>\n</div>","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"local","className":"","x":1020,"y":280,"wires":[[]]},{"id":"system-status-display","type":"ui_template","z":"motorcycle-dashboard","group":"system-status","name":"System Status Panel","order":1,"width":12,"height":2,"format":"<div style=\"padding: 8px; background: #f0f0f0; border-radius: 5px; border-left: 4px solid #2196f3;\">\n  <div style=\"display: flex; justify-content: space-between; align-items: center;\">\n    <div>\n      <strong>üõ†Ô∏è System Status:</strong> \n      <span style=\"color: {{msg.payload.dataAge < 10 ? '#4caf50' : (msg.payload.dataAge < 30 ? '#ff9800' : '#f44336')}};\">\n        {{msg.payload.dataAge < 10 ? '‚úÖ Active' : (msg.payload.dataAge < 30 ? '‚ö†Ô∏è Delayed' : '‚ùå Stalled')}}\n      </span>\n    </div>\n    <div>\n      <strong>üìä Data Records:</strong> {{msg.payload.recordCount}}\n    </div>\n    <div>\n      <strong>‚è±Ô∏è Last Update:</strong> {{msg.payload.lastUpdate}}\n    </div>\n    <div>\n      <strong>üì° Data Age:</strong> {{msg.payload.dataAge}}s\n    </div>\n  </div>\n</div>","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"local","className":"","x":1020,"y":320,"wires":[[]]},{"id":"camera-feed-display","type":"ui_template","z":"motorcycle-dashboard","group":"camera-feed","name":"Camera Feed Panel","order":1,"width":12,"height":8,"format":"<div style=\"padding: 10px; border-radius: 5px; background: #f5f5f5; border: 2px solid #2196f3;\">\n  <h3 style=\"margin: 0 0 10px 0; color: #0d47a1;\">\n    üìπ Live Camera Feed\n  </h3>\n  \n  <div style=\"position: relative; height: 100%; width: 100%; display: flex; flex-direction: column; align-items: center;\">\n    <img src=\"http://10.0.0.155:8090/stream.mjpg\" style=\"max-width: 100%; max-height: 400px; border: 1px solid #ccc; border-radius: 4px;\" />\n    \n    <div style=\"margin-top: 10px; display: flex; gap: 10px;\">\n      <button onclick=\"takeSnapshot()\" style=\"padding: 8px 15px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n        üì∏ Take Snapshot\n      </button>\n    </div>\n    \n    <div id=\"snapshotStatus\" style=\"margin-top: 10px; color: #666;\"></div>\n  </div>\n</div>\n\n<script>\n  function takeSnapshot() {\n    document.getElementById('snapshotStatus').innerText = 'Taking snapshot...';\n    \n    fetch('http://10.0.0.155:8090/snapshot')\n      .then(response => response.json())\n      .then(data => {\n        document.getElementById('snapshotStatus').innerText = `Snapshot saved: ${data.filename}`;\n      })\n      .catch(error => {\n        document.getElementById('snapshotStatus').innerText = `Error: ${error.message}`;\n      });\n  }\n  \n  // Handle connection errors\n  window.addEventListener('load', function() {\n    const img = document.querySelector('img');\n    img.onerror = function() {\n      img.style.display = 'none';\n      const errorDiv = document.createElement('div');\n      errorDiv.style.padding = '20px';\n      errorDiv.style.backgroundColor = '#ffebee';\n      errorDiv.style.border = '1px solid #f44336';\n      errorDiv.style.borderRadius = '4px';\n      errorDiv.style.textAlign = 'center';\n      errorDiv.innerHTML = '<h3 style=\"color: #c62828;\">‚ö†Ô∏è Camera Feed Unavailable</h3><p>Please check if the camera service is running.</p>';\n      img.parentNode.insertBefore(errorDiv, img.nextSibling);\n    };\n  });\n</script>","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"local","className":"","x":1020,"y":360,"wires":[[]]},{"id":"camera-snapshot-trigger","type":"inject","z":"motorcycle-dashboard","name":"Auto Snapshot Every 5 Minutes","props":[{"p":"payload"}],"repeat":"300","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"take_snapshot","payloadType":"str","x":190,"y":320,"wires":[["camera-snapshot-function"]]},{"id":"camera-snapshot-function","type":"function","z":"motorcycle-dashboard","name":"Request Snapshot","func":"// Make HTTP request to camera snapshot endpoint\nconst http = global.get('http') || require('http');\n\ntry {\n    const req = http.request({\n        hostname: 'localhost',\n        port: 8090,\n        path: '/snapshot',\n        method: 'GET'\n    }, (res) => {\n        let data = '';\n        res.on('data', (chunk) => {\n            data += chunk;\n        });\n        res.on('end', () => {\n            try {\n                const result = JSON.parse(data);\n                node.status({fill:\"green\", shape:\"dot\", text:\"Snapshot saved: \" + result.filename});\n            } catch (e) {\n                node.status({fill:\"yellow\", shape:\"ring\", text:\"Invalid response\"});\n            }\n        });\n    });\n    \n    req.on('error', (e) => {\n        node.status({fill:\"red\", shape:\"ring\", text:\"Error: \" + e.message});\n    });\n    \n    req.end();\n} catch (e) {\n    node.status({fill:\"red\", shape:\"ring\", text:\"Error: \" + e.message});\n}\n\nreturn null;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":320,"wires":[[]]},{"id":"fix-gps-button","type":"ui_button","z":"motorcycle-dashboard","name":"Fix GPS Button","group":"gps-info","order":2,"width":3,"height":1,"passthru":false,"label":"üõ†Ô∏è Fix GPS","tooltip":"Run GPS fix script","color":"#f44336","bgcolor":"#ffffff","className":"","icon":"fa-satellite-dish","payload":"fix_gps","payloadType":"str","topic":"topic","topicType":"msg","x":140,"y":400,"wires":[["run-gps-fix"]]},{"id":"run-gps-fix","type":"exec","z":"motorcycle-dashboard","command":"sudo /home/pi/fix_gps.sh","addpay":"","append":"","useSpawn":"false","timer":"","winHide":false,"oldrc":false,"name":"Run GPS Fix Script","x":340,"y":400,"wires":[["gps-fix-result"],["gps-fix-error"],["gps-fix-error"]]},{"id":"gps-fix-result","type":"ui_toast","z":"motorcycle-dashboard","name":"Show Success Toast","position":"top right","displayTime":"5","highlight":"","sendall":true,"outputs":0,"ok":"OK","cancel":"","raw":false,"className":"","topic":"GPS Fix Attempted","x":570,"y":380,"wires":[]},{"id":"gps-fix-error","type":"ui_toast","z":"motorcycle-dashboard","name":"Show Error Toast","position":"top right","displayTime":"5","highlight":"#ff0000","sendall":true,"outputs":0,"ok":"OK","cancel":"","raw":false,"className":"","topic":"GPS Fix Error","x":570,"y":420,"wires":[]},{"id":"gauges","type":"ui_group","name":"G-Force & Lean Angle","tab":"dashboard-tab","order":1,"disp":true,"width":"12","collapse":false},{"id":"performance","type":"ui_group","name":"Performance & Speed","tab":"dashboard-tab","order":2,"disp":true,"width":"12","collapse":false},{"id":"gps-info","type":"ui_group","name":"GPS Status & Location","tab":"dashboard-tab","order":3,"disp":true,"width":"12","collapse":false},{"id":"camera-feed","type":"ui_group","name":"Camera Feed","tab":"dashboard-tab","order":4,"disp":true,"width":"12","collapse":false},{"id":"system-status","type":"ui_group","name":"System Information","tab":"dashboard-tab","order":5,"disp":true,"width":"12","collapse":false},{"id":"dashboard-tab","type":"ui_tab","name":"üèçÔ∏è Motorcycle Dashboard","icon":"dashboard","order":1,"disabled":false,"hidden":false},{"id":"ride-tracker","type":"ui_group","name":"Ride Tracking","tab":"dashboard-tab","order":6,"disp":true,"width":"12","collapse":false},{"id":"track-rides-controls","type":"ui_template","z":"motorcycle-dashboard","group":"ride-tracker","name":"Ride Tracking Controls","order":1,"width":"12","height":"4","format":"<div style=\"padding: 15px; border-radius: 5px; background: #f5f5f5; border: 2px solid #2196f3;\">\n  <h3 style=\"margin: 0 0 15px 0; color: #0d47a1;\">\n    üó∫Ô∏è Route Tracking\n  </h3>\n  \n  <div id=\"track-ride-container\" style=\"display: flex; flex-direction: column;\">\n    <div id=\"tracking-status\" style=\"margin-bottom: 15px; font-weight: bold;\">\n      Loading tracking status...\n    </div>\n    \n    <div style=\"display: flex; gap: 10px; margin-bottom: 15px;\">\n      <button id=\"start-ride-btn\" onclick=\"startRide()\" style=\"padding: 10px 15px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer;\">\n        üö¶ Start New Ride\n      </button>\n      \n      <button id=\"end-ride-btn\" onclick=\"endRide()\" style=\"padding: 10px 15px; background-color: #f44336; color: white; border: none; border-radius: 4px; cursor: pointer; display: none;\">\n        üèÅ End Ride\n      </button>\n    </div>\n    \n    <div id=\"ride-stats\" style=\"margin-top: 10px; display: none;\">\n      <div><strong>Active Ride:</strong> <span id=\"ride-name\">-</span></div>\n      <div><strong>Started:</strong> <span id=\"ride-start-time\">-</span></div>\n      <div><strong>Track Points:</strong> <span id=\"track-points\">0</span></div>\n    </div>\n    \n    <div id=\"ride-history\" style=\"margin-top: 15px; display: none;\">\n      <h4 style=\"margin: 10px 0;\">Recent Rides:</h4>\n      <select id=\"ride-select\" onchange=\"loadRideTrack()\" style=\"width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px;\">\n        <option value=\"\">Select a previous ride</option>\n      </select>\n    </div>\n  </div>\n</div>\n\n<script>\n  (function(scope) {\n    // Store state\n    scope.rideTracking = {\n      isTracking: false,\n      rideId: null,\n      rideName: null,\n      trackPoints: [],\n      rides: [],\n      selectedRide: null,\n      routeLayer: null\n    };\n    \n    // Initialize\n    checkTrackingStatus();\n    loadRides();\n    \n    // Set up periodic refresh\n    setInterval(function() {\n      if (scope.rideTracking.isTracking) {\n        updateTrackPoints();\n      }\n    }, 5000);\n    \n    // Make functions global for button access\n    window.startRide = startRide;\n    window.endRide = endRide;\n    window.loadRideTrack = loadRideTrack;\n    \n    // Get current tracking status\n    function checkTrackingStatus() {\n      fetch('http://' + window.location.hostname + ':5001/api/tracking_status')\n        .then(response => response.json())\n        .then(data => {\n          updateTrackingStatus(data);\n        })\n        .catch(error => {\n          console.error('Error checking tracking status:', error);\n          document.getElementById('tracking-status').innerHTML = \n            '<span style=\"color: #f44336;\">‚ö†Ô∏è Error connecting to route tracker</span>';\n        });\n    }\n    \n    // Start a new ride\n    function startRide() {\n      const rideName = prompt('Enter a name for this ride:', \n        'Ride on ' + new Date().toLocaleString());\n      \n      if (!rideName) return; // User cancelled\n      \n      fetch('http://' + window.location.hostname + ':5001/api/start_ride', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          name: rideName\n        })\n      })\n        .then(response => response.json())\n        .then(data => {\n          if (data.success) {\n            scope.rideTracking.isTracking = true;\n            scope.rideTracking.rideId = data.ride_id;\n            scope.rideTracking.rideName = rideName;\n            \n            updateUI();\n            updateTrackPoints();\n            \n            // Show success notification\n            showNotification('Ride started: ' + rideName, 'success');\n          } else {\n            showNotification('Failed to start ride: ' + data.message, 'error');\n          }\n        })\n        .catch(error => {\n          console.error('Error starting ride:', error);\n          showNotification('Error starting ride', 'error');\n        });\n    }\n    \n    // End the current ride\n    function endRide() {\n      if (!confirm('End the current ride?')) return;\n      \n      fetch('http://' + window.location.hostname + ':5001/api/end_ride', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n        .then(response => response.json())\n        .then(data => {\n          if (data.success) {\n            scope.rideTracking.isTracking = false;\n            scope.rideTracking.rideId = null;\n            \n            // Show ride summary\n            let summary = `Ride complete: ${data.name}\\n`;\n            summary += `Distance: ${data.distance_miles.toFixed(2)} miles\\n`;\n            summary += `Max Speed: ${data.max_speed_mph.toFixed(1)} mph\\n`;\n            summary += `Avg Speed: ${data.avg_speed_mph.toFixed(1)} mph`;\n            \n            alert(summary);\n            updateUI();\n            loadRides(); // Refresh ride history\n            \n            // Show success notification\n            showNotification('Ride ended successfully', 'success');\n          } else {\n            showNotification('Failed to end ride: ' + data.message, 'error');\n          }\n        })\n        .catch(error => {\n          console.error('Error ending ride:', error);\n          showNotification('Error ending ride', 'error');\n        });\n    }\n    \n    // Update track points for current ride\n    function updateTrackPoints() {\n      fetch('http://' + window.location.hostname + ':5001/api/current_ride_track')\n        .then(response => response.json())\n        .then(data => {\n          if (data.success) {\n            scope.rideTracking.trackPoints = data.points;\n            document.getElementById('track-points').innerText = data.point_count;\n            \n            // Update map with track\n            updateMapWithTrack(data.points);\n          }\n        })\n        .catch(error => {\n          console.error('Error updating track points:', error);\n        });\n    }\n    \n    // Load previous rides\n    function loadRides() {\n      fetch('http://' + window.location.hostname + ':5001/api/rides')\n        .then(response => response.json())\n        .then(data => {\n          if (data.success) {\n            scope.rideTracking.rides = data.rides;\n            \n            // Update rides dropdown\n            const select = document.getElementById('ride-select');\n            \n            // Clear existing options except the first\n            while (select.options.length > 1) {\n              select.remove(1);\n            }\n            \n            // Add rides to dropdown\n            data.rides.forEach(ride => {\n              if (!ride.active) { // Only show completed rides\n                const option = document.createElement('option');\n                option.value = ride.ride_id;\n                option.text = `${ride.name} (${new Date(ride.start_time).toLocaleString()}) - ${ride.distance_miles ? ride.distance_miles.toFixed(2) + ' miles' : 'N/A'}`;\n                select.add(option);\n              }\n            });\n            \n            document.getElementById('ride-history').style.display = \n              data.rides.length > 0 ? 'block' : 'none';\n          }\n        })\n        .catch(error => {\n          console.error('Error loading rides:', error);\n        });\n    }\n    \n    // Load track for a specific ride\n    function loadRideTrack() {\n      const rideId = document.getElementById('ride-select').value;\n      if (!rideId) return;\n      \n      scope.rideTracking.selectedRide = rideId;\n      \n      fetch('http://' + window.location.hostname + ':5001/api/ride/' + rideId + '/track')\n        .then(response => response.json())\n        .then(data => {\n          if (data.success) {\n            // Update map with historical track\n            updateMapWithTrack(data.points, true);\n            showNotification(`Loaded route: ${data.ride_name}`, 'info');\n          }\n        })\n        .catch(error => {\n          console.error('Error loading ride track:', error);\n          showNotification('Error loading route', 'error');\n        });\n    }\n    \n    // Update UI based on tracking status\n    function updateTrackingStatus(data) {\n      scope.rideTracking.isTracking = data.tracking_active;\n      \n      if (data.tracking_active && data.ride_id) {\n        scope.rideTracking.rideId = data.ride_id;\n        scope.rideTracking.rideName = data.name;\n        updateTrackPoints();\n      }\n      \n      updateUI();\n    }\n    \n    // Update UI elements based on tracking state\n    function updateUI() {\n      const statusEl = document.getElementById('tracking-status');\n      const startBtn = document.getElementById('start-ride-btn');\n      const endBtn = document.getElementById('end-ride-btn');\n      const statsEl = document.getElementById('ride-stats');\n      const rideNameEl = document.getElementById('ride-name');\n      const startTimeEl = document.getElementById('ride-start-time');\n      \n      if (scope.rideTracking.isTracking) {\n        statusEl.innerHTML = '<span style=\"color: #4CAF50;\">üö¥‚Äç‚ôÇÔ∏è Currently tracking ride</span>';\n        startBtn.style.display = 'none';\n        endBtn.style.display = 'block';\n        statsEl.style.display = 'block';\n        \n        rideNameEl.innerText = scope.rideTracking.rideName || 'Unknown';\n        startTimeEl.innerText = new Date().toLocaleString();\n      } else {\n        statusEl.innerHTML = '<span style=\"color: #757575;\">üìç Not currently tracking</span>';\n        startBtn.style.display = 'block';\n        endBtn.style.display = 'none';\n        statsEl.style.display = 'none';\n      }\n    }\n    \n    // Update map with track\n    function updateMapWithTrack(points, isHistorical) {\n      if (!points || points.length === 0) return;\n      \n      // Create GeoJSON LineString for the track\n      const coordinates = points.map(p => [p.lon, p.lat]);\n      \n      // Create a route object for the worldmap node\n      const route = {\n        name: isHistorical ? 'Historical Route' : 'Current Route',\n        line: coordinates,\n        color: isHistorical ? 'purple' : 'red',\n        width: 4\n      };\n      \n      // Send to worldmap\n      const msg = { payload: route };\n      scope.send({topic: 'worldmap-route', payload: route});\n      \n      // Center map on the route\n      if (points.length > 0) {\n        const midPoint = points[Math.floor(points.length / 2)];\n        scope.send({topic: 'worldmap-center', payload: {lat: midPoint.lat, lon: midPoint.lon, zoom: 14}});\n      }\n    }\n    \n    // Show notification\n    function showNotification(message, type) {\n      const notificationColors = {\n        success: '#4CAF50',\n        error: '#f44336',\n        info: '#2196F3'\n      };\n      \n      const notificationEl = document.createElement('div');\n      notificationEl.style.position = 'fixed';\n      notificationEl.style.top = '20px';\n      notificationEl.style.right = '20px';\n      notificationEl.style.padding = '10px 15px';\n      notificationEl.style.borderRadius = '4px';\n      notificationEl.style.backgroundColor = notificationColors[type] || '#333';\n      notificationEl.style.color = 'white';\n      notificationEl.style.boxShadow = '0 2px 5px rgba(0,0,0,0.3)';\n      notificationEl.style.zIndex = '9999';\n      notificationEl.innerText = message;\n      \n      document.body.appendChild(notificationEl);\n      \n      setTimeout(function() {\n        notificationEl.style.opacity = '0';\n        notificationEl.style.transition = 'opacity 0.5s';\n        \n        setTimeout(function() {\n          document.body.removeChild(notificationEl);\n        }, 500);\n      }, 3000);\n    }\n  })(this);\n</script>","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"local","className":"","x":1020,"y":460,"wires":[["route-handler"]]},{"id":"route-handler","type":"function","z":"motorcycle-dashboard","name":"Route Handler","func":"// Handle messages from the route tracker UI\nif (msg.topic === 'worldmap-route') {\n    // Forward route to the worldmap\n    return [{\n        payload: msg.payload,\n        name: msg.payload.name,\n        line: msg.payload.line,\n        color: msg.payload.color,\n        width: msg.payload.width\n    }, null];\n} else if (msg.topic === 'worldmap-center') {\n    // Forward center command to the worldmap\n    return [null, {\n        payload: {\n            command: {\n                lat: msg.payload.lat,\n                lon: msg.payload.lon,\n                zoom: msg.payload.zoom\n            }\n        }\n    }];\n}\n\nreturn [null, null];","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1250,"y":460,"wires":[["route-to-map"],["center-map"]]},{"id":"route-to-map","type":"worldmap in","z":"motorcycle-dashboard","name":"Draw Route on Map","path":"/worldmap","x":1460,"y":440,"wires":[]},{"id":"center-map","type":"worldmap","z":"motorcycle-dashboard","name":"GPS Location","lat":"51.5074","lon":"-0.1278","zoom":"15","layer":"OSM","cluster":"","maxage":"","usermenu":"show","layers":"show","panit":"false","panlock":"false","zoomlock":"false","hiderightclick":"false","coords":"deg","showgrid":"false","allowFileDrop":"false","path":"/worldmap","overlist":"DR,CO,RA,DN,HM","maplist":"OSMG,OSMC,EsriC,EsriS,EsriT,EsriDG,UKOS","mapname":"","mapurl":"","mapopt":"","mapwms":false},{"id":"route-tracker-init","type":"inject","z":"motorcycle-dashboard","name":"Check Route Tracker Status","props":[{"p":"payload"}],"repeat":"60","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":160,"y":460,"wires":[["check-route-tracker"]]},{"id":"check-route-tracker","type":"exec","z":"motorcycle-dashboard","command":"systemctl is-active route-tracker.service","addpay":"","append":"","useSpawn":"false","timer":"","oldrc":false,"name":"Check Route Tracker Service","x":400,"y":460,"wires":[["route-tracker-status"],[],[]]},{"id":"route-tracker-status","type":"function","z":"motorcycle-dashboard","name":"Show Route Tracker Status","func":"// Check if the route tracker service is running\nconst status = msg.payload.trim();\nlet statusMsg = {};\n\nif (status === 'active') {\n    statusMsg = {\n        topic: 'route_tracker_status',\n        payload: {\n            status: 'active',\n            message: 'Route tracker is running',\n            color: '#4CAF50'\n        }\n    };\n} else {\n    statusMsg = {\n        topic: 'route_tracker_status',\n        payload: {\n            status: 'inactive',\n            message: 'Route tracker is not running',\n            color: '#f44336'\n        }\n    };\n}\n\nreturn statusMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":670,"y":460,"wires":[["route-tracker-display"]]},{"id":"route-tracker-display","type":"ui_text","z":"motorcycle-dashboard","group":"ride-tracker","order":2,"width":0,"height":0,"name":"Route Tracker Status","label":"Route Tracker:","format":"{{msg.payload.message}}","layout":"row-spread","className":"","style":true,"font":"","fontSize":16,"color":"{{msg.payload.color}}","x":900,"y":460,"wires":[]},{"id":"map-layer-buttons","type":"ui_template","z":"motorcycle-dashboard","group":"gps-info","name":"Map Layer Selector","order":3,"width":0,"height":0,"format":"\n<div style=\"display: flex; flex-wrap: wrap; gap: 5px; margin: 5px 0;\">\n  <button onclick=\"setMapLayer('OSM')\" style=\"flex: 1; padding: 5px; background: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; min-width: 80px;\">\n    OpenStreetMap\n  </button>\n  <button onclick=\"setMapLayer('OSMG')\" style=\"flex: 1; padding: 5px; background: #2196F3; color: white; border: none; border-radius: 4px; cursor: pointer; min-width: 80px;\">\n    OSM German\n  </button>\n  <button onclick=\"setMapLayer('EsriS')\" style=\"flex: 1; padding: 5px; background: #FF9800; color: white; border: none; border-radius: 4px; cursor: pointer; min-width: 80px;\">\n    ESRI Streets\n  </button>\n  <button onclick=\"setMapLayer('EsriT')\" style=\"flex: 1; padding: 5px; background: #795548; color: white; border: none; border-radius: 4px; cursor: pointer; min-width: 80px;\">\n    ESRI Terrain\n  </button>\n</div>\n\n<script>\n  function setMapLayer(layer) {\n    // Send the layer change command to the worldmap\n    fetch('/worldmap/layer/' + layer)\n      .then(response => {\n        if(response.ok) {\n          console.log('Map layer changed to', layer);\n        }\n      })\n      .catch(error => {\n        console.error('Error changing map layer:', error);\n      });\n  }\n</script>\n        ","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"local","className":""}]