[
    {
        "id": "motorcycle-dashboard",
        "type": "tab",
        "label": "üèçÔ∏è Motorcycle Dashboard",
        "disabled": false,
        "info": "Enhanced motorcycle telemetry dashboard with persistent GPS tracking"
    },
    {
        "id": "inject-timer",
        "type": "inject",
        "z": "motorcycle-dashboard",
        "name": "Every 2 seconds",
        "props": [{"p": "payload"}],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [["get-latest-data", "get-last-gps"]]
    },
    {
        "id": "get-latest-data",
        "type": "exec",
        "z": "motorcycle-dashboard",
        "command": "sqlite3 /home/pi/motorcycle_data/telemetry.db \"SELECT ax, ay, az, COALESCE(latitude, 0) as latitude, COALESCE(longitude, 0) as longitude, COALESCE(speed_mph, 0) as speed_mph, COALESCE(gps_fix, 0) as gps_fix, timestamp FROM telemetry_data ORDER BY timestamp DESC LIMIT 1\" -json",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Latest Telemetry",
        "x": 380,
        "y": 80,
        "wires": [["parse-latest"], ["debug-error"], ["debug-error"]]
    },
    {
        "id": "get-last-gps",
        "type": "exec",
        "z": "motorcycle-dashboard",
        "command": "sqlite3 /home/pi/motorcycle_data/telemetry.db \"SELECT latitude, longitude, speed_mph, timestamp FROM telemetry_data WHERE latitude IS NOT NULL AND longitude IS NOT NULL AND latitude != 0 AND longitude != 0 ORDER BY timestamp DESC LIMIT 1\" -json",
        "addpay": "",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Last Known GPS",
        "x": 380,
        "y": 120,
        "wires": [["parse-gps"], ["debug-error"], ["debug-error"]]
    },
    {
        "id": "parse-latest",
        "type": "function",
        "z": "motorcycle-dashboard",
        "name": "Parse Latest Data",
        "func": "try {\n    if (msg.payload && typeof msg.payload === 'string' && msg.payload.trim()) {\n        const jsonData = JSON.parse(msg.payload.trim());\n        if (jsonData && Array.isArray(jsonData) && jsonData.length > 0) {\n            msg.payload = jsonData[0];\n            msg.topic = 'latest_data';\n            return msg;\n        }\n    }\n} catch (e) {\n    node.warn(\"JSON Parse Error: \" + e.message);\n}\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 80,
        "wires": [["combine-data"]]
    },
    {
        "id": "parse-gps",
        "type": "function",
        "z": "motorcycle-dashboard",
        "name": "Parse GPS Data",
        "func": "try {\n    if (msg.payload && typeof msg.payload === 'string' && msg.payload.trim()) {\n        const jsonData = JSON.parse(msg.payload.trim());\n        if (jsonData && Array.isArray(jsonData) && jsonData.length > 0) {\n            msg.payload = jsonData[0];\n            msg.topic = 'last_gps';\n            return msg;\n        }\n    }\n} catch (e) {\n    node.warn(\"GPS Parse Error: \" + e.message);\n}\n// If no GPS data found, send empty data\nmsg.payload = null;\nmsg.topic = 'last_gps';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 120,
        "wires": [["combine-data"]]
    },
    {
        "id": "debug-error",
        "type": "debug",
        "z": "motorcycle-dashboard",
        "name": "SQLite Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 160,
        "wires": []
    },
    {
        "id": "combine-data",
        "type": "join",
        "z": "motorcycle-dashboard",
        "name": "Combine Latest + GPS",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "1",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 800,
        "y": 100,
        "wires": [["process-combined-data"]]
    },
    {
        "id": "process-combined-data",
        "type": "function",
        "z": "motorcycle-dashboard",
        "name": "Enhanced GPS Processing",
        "func": "const latestData = msg.payload.latest_data;\nconst lastGPS = msg.payload.last_gps;\n\nif (!latestData) return null;\n\n// Calibration constants\nconst X_OFFSET = 6200;\nconst Y_OFFSET = 100;\nconst Z_OFFSET = 15400;\nconst SCALE = 16384;\n\n// Calculate G-forces\nconst forwardG = (latestData.ax - X_OFFSET) / SCALE;\nconst lateralG = (latestData.ay - Y_OFFSET) / SCALE;\nconst verticalG = (latestData.az - Z_OFFSET) / SCALE;\n\n// Calculate lean angle in degrees\nconst leanAngle = Math.asin(Math.max(-1, Math.min(1, lateralG))) * 57.3;\n\n// Current GPS status\nconst currentGPS = (latestData.latitude !== 0 || latestData.longitude !== 0) && latestData.gps_fix;\nconst currentTime = new Date(latestData.timestamp).toLocaleTimeString();\n\n// GPS display logic: Use current GPS if available, otherwise use last known\nlet displayLat, displayLon, displaySpeed, gpsAge = \"\";\n\nif (currentGPS) {\n    displayLat = parseFloat(latestData.latitude);\n    displayLon = parseFloat(latestData.longitude);\n    displaySpeed = parseFloat(latestData.speed_mph || 0);\n    gpsAge = \"Live GPS\";\n} else if (lastGPS) {\n    displayLat = parseFloat(lastGPS.latitude);\n    displayLon = parseFloat(lastGPS.longitude);\n    displaySpeed = parseFloat(lastGPS.speed_mph || 0);\n    const lastGpsTime = new Date(lastGPS.timestamp);\n    const now = new Date();\n    const minutesAgo = Math.round((now - lastGpsTime) / 60000);\n    gpsAge = `${minutesAgo} min ago`;\n} else {\n    // Default to Massachusetts coordinates (where you got GPS before)\n    displayLat = 42.809604;\n    displayLon = -70.867343;\n    displaySpeed = 0;\n    gpsAge = \"No GPS data\";\n}\n\nconst messages = [\n    { topic: 'lean_angle', payload: parseFloat(leanAngle.toFixed(1)) },\n    { topic: 'forward_g', payload: parseFloat(forwardG.toFixed(3)) },\n    { topic: 'lateral_g', payload: parseFloat(lateralG.toFixed(3)) },\n    { topic: 'speed', payload: parseFloat(latestData.speed_mph || 0) },\n    { \n        topic: 'gps_map', \n        payload: {\n            lat: displayLat,\n            lon: displayLon,\n            name: currentGPS ? 'Live Motorcycle Location' : (lastGPS ? 'Last Known Location' : 'Default Location'),\n            icon: currentGPS ? 'motorcycle' : (lastGPS ? 'location-arrow' : 'question-circle'),\n            iconColor: currentGPS ? 'blue' : (lastGPS ? 'orange' : 'red'),\n            popup: currentGPS ? `Live GPS: ${displayLat.toFixed(6)}, ${displayLon.toFixed(6)}` : \n                   (lastGPS ? `Last Known: ${displayLat.toFixed(6)}, ${displayLon.toFixed(6)} (${gpsAge})` : 'No GPS data available')\n        }\n    },\n    {\n        topic: 'gps_status',\n        payload: {\n            hasCurrentGPS: currentGPS,\n            hasLastGPS: !!lastGPS,\n            currentLat: latestData.latitude,\n            currentLon: latestData.longitude,\n            displayLat: displayLat,\n            displayLon: displayLon,\n            gps_fix: latestData.gps_fix,\n            speed: displaySpeed,\n            lastUpdate: currentTime,\n            gpsAge: gpsAge,\n            gpsStatus: currentGPS ? 'LIVE' : (lastGPS ? 'LAST_KNOWN' : 'NO_GPS')\n        }\n    },\n    {\n        topic: 'system_status',\n        payload: {\n            recordCount: (context.get('counter') || 0) + 1,\n            lastUpdate: currentTime,\n            dataAge: Math.round((Date.now() - new Date(latestData.timestamp).getTime()) / 1000)\n        }\n    }\n];\n\n// Increment counter\nconst count = (context.get('counter') || 0) + 1;\ncontext.set('counter', count);\nmessages[6].payload.recordCount = count;\n\nreturn messages;",
        "outputs": 7,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 100,
        "wires": [
            ["lean-gauge"],
            ["forward-g-gauge"], 
            ["lateral-g-gauge"],
            ["speed-gauge"],
            ["gps-map"],
            ["enhanced-gps-status"],
            ["system-status-display"]
        ]
    },
    {
        "id": "lean-gauge",
        "type": "ui_gauge",
        "z": "motorcycle-dashboard",
        "name": "Lean Angle",
        "group": "gauges",
        "order": 1,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "üèçÔ∏è Lean Angle",
        "label": "degrees",
        "format": "{{value}}¬∞",
        "min": -60,
        "max": 60,
        "colors": ["#00b500","#e6e600","#ca3838"],
        "seg1": 30,
        "seg2": 45,
        "x": 1260,
        "y": 40,
        "wires": []
    },
    {
        "id": "forward-g-gauge",
        "type": "ui_gauge",
        "z": "motorcycle-dashboard",
        "name": "Forward G-Force",
        "group": "gauges",
        "order": 2,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "‚ö° Forward G",
        "label": "G",
        "format": "{{value}}g",
        "min": -1.5,
        "max": 1.5,
        "colors": ["#ca3838","#e6e600","#00b500"],
        "seg1": 0.5,
        "seg2": 1.0,
        "x": 1260,
        "y": 80,
        "wires": []
    },
    {
        "id": "lateral-g-gauge",
        "type": "ui_gauge",
        "z": "motorcycle-dashboard",
        "name": "Lateral G-Force",
        "group": "gauges",
        "order": 3,
        "width": 4,
        "height": 4,
        "gtype": "gage",
        "title": "üåÄ Lateral G",
        "label": "G",
        "format": "{{value}}g",
        "min": -1.2,
        "max": 1.2,
        "colors": ["#ca3838","#e6e600","#00b500"],
        "seg1": 0.4,
        "seg2": 0.8,
        "x": 1260,
        "y": 120,
        "wires": []
    },
    {
        "id": "speed-gauge",
        "type": "ui_gauge",
        "z": "motorcycle-dashboard",
        "name": "Speed",
        "group": "performance",
        "order": 1,
        "width": 6,
        "height": 4,
        "gtype": "gage",
        "title": "üöÄ Speed",
        "label": "mph",
        "format": "{{value}} mph",
        "min": 0,
        "max": 120,
        "colors": ["#00b500","#e6e600","#ca3838"],
        "seg1": 45,
        "seg2": 70,
        "x": 1260,
        "y": 160,
        "wires": []
    },
    {
        "id": "gps-map",
        "type": "worldmap",
        "z": "motorcycle-dashboard",
        "name": "GPS Location",
        "lat": "42.809604",
        "lon": "-70.867343",
        "zoom": "15",
        "layer": "OSM",
        "cluster": "",
        "maxage": "",
        "usermenu": "show",
        "layers": "show",
        "panit": "false",
        "panlock": "false",
        "zoomlock": "false",
        "hiderightclick": "false",
        "coords": "deg",
        "showgrid": "false",
        "allowFileDrop": "false",
        "path": "/worldmap",
        "overlist": "DR,CO,RA,DN",
        "maplist": "OSM,Esri,Nat,OPR",
        "mapname": "",
        "mapurl": "",
        "mapopt": "",
        "mapwms": false,
        "x": 1260,
        "y": 200,
        "wires": []
    },
    {
        "id": "enhanced-gps-status",
        "type": "ui_template",
        "z": "motorcycle-dashboard",
        "group": "gps-info",
        "name": "Enhanced GPS Status",
        "order": 1,
        "width": 12,
        "height": 4,
        "format": "<div style=\"padding: 15px; border-radius: 8px; \n  background: {{msg.payload.gpsStatus === 'LIVE' ? '#e8f5e8' : \n              msg.payload.gpsStatus === 'LAST_KNOWN' ? '#fff3cd' : '#ffe6e6'}}; \n  border: 3px solid {{msg.payload.gpsStatus === 'LIVE' ? '#4caf50' : \n                     msg.payload.gpsStatus === 'LAST_KNOWN' ? '#ffc107' : '#f44336'}};\">\n  \n  <h2 style=\"margin: 0 0 15px 0; \n    color: {{msg.payload.gpsStatus === 'LIVE' ? '#2e7d32' : \n           msg.payload.gpsStatus === 'LAST_KNOWN' ? '#f57c00' : '#c62828'}};\">\n    {{msg.payload.gpsStatus === 'LIVE' ? 'üõ∞Ô∏è GPS LIVE' : \n      msg.payload.gpsStatus === 'LAST_KNOWN' ? 'üìç LAST KNOWN LOCATION' : '‚ùå GPS NOT AVAILABLE'}}\n  </h2>\n  \n  <div style=\"display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 15px; margin-bottom: 15px;\">\n    <div style=\"background: rgba(255,255,255,0.7); padding: 10px; border-radius: 5px;\">\n      <strong>üìç Position Status:</strong><br>\n      {{msg.payload.gpsStatus === 'LIVE' ? 'Real-time tracking' : \n        msg.payload.gpsStatus === 'LAST_KNOWN' ? 'Using last position' : 'No position data'}}<br>\n      <small style=\"color: #666;\">{{msg.payload.gpsAge}}</small>\n    </div>\n    \n    <div style=\"background: rgba(255,255,255,0.7); padding: 10px; border-radius: 5px;\">\n      <strong>üåç Coordinates:</strong><br>\n      {{msg.payload.displayLat ? msg.payload.displayLat.toFixed(6) : 'N/A'}}<br>\n      {{msg.payload.displayLon ? msg.payload.displayLon.toFixed(6) : 'N/A'}}\n    </div>\n    \n    <div style=\"background: rgba(255,255,255,0.7); padding: 10px; border-radius: 5px;\">\n      <strong>üöÄ Speed:</strong><br>\n      {{msg.payload.speed}} mph<br>\n      <strong>Fix:</strong> {{msg.payload.gps_fix ? '3D Fix' : 'No Fix'}}\n    </div>\n  </div>\n  \n  <div style=\"background: rgba(255,255,255,0.5); padding: 10px; border-radius: 5px; font-size: 14px;\">\n    <strong>üí° GPS Info:</strong> \n    {{msg.payload.gpsStatus === 'LIVE' ? 'GPS is working! Map shows your current location.' : \n      msg.payload.gpsStatus === 'LAST_KNOWN' ? 'GPS signal lost, but map shows your last known position (' + msg.payload.gpsAge + ').' : \n      'GPS not available. Check if GPS antenna is connected and has clear sky view.'}} \n    <br><strong>Last Update:</strong> {{msg.payload.lastUpdate}}\n  </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1260,
        "y": 240,
        "wires": [[]]
    },
    {
        "id": "system-status-display",
        "type": "ui_template",
        "z": "motorcycle-dashboard",
        "group": "system-status",
        "name": "System Status Panel",
        "order": 1,
        "width": 12,
        "height": 2,
        "format": "<div style=\"padding: 8px; background: #f0f0f0; border-radius: 5px; border-left: 4px solid #2196f3;\">\n  <div style=\"display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap;\">\n    <div>\n      <strong>üõ†Ô∏è System:</strong> \n      <span style=\"color: #4caf50;\">‚úÖ Active</span>\n    </div>\n    <div>\n      <strong>üìä Records:</strong> {{msg.payload.recordCount}}\n    </div>\n    <div>\n      <strong>‚è±Ô∏è Updated:</strong> {{msg.payload.lastUpdate}}\n    </div>\n    <div>\n      <strong>üì° Age:</strong> {{msg.payload.dataAge}}s\n    </div>\n    <div>\n      <strong>üîß Devices:</strong> GPS, IMU, Camera, Cellular\n    </div>\n  </div>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1260,
        "y": 280,
        "wires": [[]]
    },
    {
        "id": "gauges",
        "type": "ui_group",
        "name": "G-Force & Lean Angle",
        "tab": "dashboard-tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "performance",
        "type": "ui_group",
        "name": "Performance & Speed",
        "tab": "dashboard-tab",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "gps-info",
        "type": "ui_group",
        "name": "GPS Status & Location",
        "tab": "dashboard-tab",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "system-status",
        "type": "ui_group",
        "name": "System Information",
        "tab": "dashboard-tab",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "dashboard-tab",
        "type": "ui_tab",
        "name": "üèçÔ∏è Motorcycle Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
] 